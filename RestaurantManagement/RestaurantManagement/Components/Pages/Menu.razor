@page "/menu"
@using Microsoft.EntityFrameworkCore
@using RestaurantManagement.Data
@using RestaurantManagement.Models
@using RestaurantManagement.Services
@inject IOrderService OrderService
@inject RestaurantDbContext DbContext

<h1>Menu</h1>

@if (categories != null)
{
    @foreach (var category in categories)
    {
        <div class="category-section">
            <h2 class="bg-dark text-white p-3">@category.Name</h2>

            <div class="row">
                @foreach (var menuItem in menuItems.Where(m => m.SubCategories.MainCategoryID == category.ID))
                {
                    <div class="col-md-6 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@menuItem.Name</h5>
                                <p class="card-text">@menuItem.Description</p>
                                <p class="card-text text-primary">₺@menuItem.Price.ToString("F2")</p>
                                <div class="d-flex align-items-center">
                                    <input type="number" class="form-control me-2" style="width: 100px"
                                           @bind="quantities[menuItem.ID]"
                                           @bind:event="oninput"
                                           min="1" />
                                    @if (menuItem.IsAvailable)
                                    {
                                        <button class="btn btn-success" @onclick="async () => await AddToOrder(menuItem)">
                                            Sipariş Ver
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Mevcut Değil</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    private List<MainCategories> categories;
    private List<MenuItems> menuItems;
    private Dictionary<int, int> quantities = new Dictionary<int, int>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Ana kategorileri yükle
            categories = await DbContext.MainCategories.ToListAsync();

            // Menü öğelerini alt kategorileriyle birlikte yükle
            menuItems = await DbContext.MenuItems
                .Include(m => m.SubCategories)
                .ThenInclude(s => s.MainCategories)
                .ToListAsync();

            // Quantity dictionary'sini başlat
            if (menuItems != null)
            {
                foreach (var item in menuItems)
                {
                    quantities[item.ID] = 1;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Veri yüklenirken hata: {ex.Message}");
        }
    }

    private async Task AddToOrder(MenuItems menuItem)
    {
        try
        {
            Console.WriteLine($"AddToOrder başladı: MenuItemID={menuItem.ID}");

            var orderItem = new OrderItems
            {
                MenuItemID = menuItem.ID,
                Quantity = quantities[menuItem.ID],
                UnitPrice = menuItem.Price
            };

            Console.WriteLine("OrderService.AddOrderItem çağrılıyor...");
            await OrderService.AddOrderItem(orderItem);
        
            quantities[menuItem.ID] = 1;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Menu HATA: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
        }
    }
    }
}